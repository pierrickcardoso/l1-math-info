Semaine 1:
Les dictionnaire et ensemble 
Un ensemble et defini par set(elem) avec un iterable a la place d'elem, l'on ne peut pas creer un ensemble vide 
Un ensemble est une sorte de liste qui permet de stocker des donne unique l'on ne peut avoir 2 fois la meme valeur dans un ensemble 
Les ensemble possede quelque metode:
tel que add ou remove qui ajoute ou supprime un element et renvoie None donc modifie la variable 
il y a aussi union, intersection renvoie l'union ou l'intersection de l'essemble a qui elle sont applique ex ens.union(un_autre_ensemble)
et enfin les methode issubset, isdisjoint qui sont des predicat isbuset renvoie True si ens est compris dans autre ensemble 
Isdisjoint renvoie True si les element sont disjoint (aucun elem en commun)
enfin 
ensemble.copy() creer une copie de l'element 
Les dictionnaires:
Un dictionnaire se definie comme suis 
dict={}
Dans un dictionnaire les donne sont stocke sous forme de paire keys:values les keys sdoivent etre unique 
prennont comme exemple le dict suivant :
>>>dict={'Jean':'050512112','Remy':'02245124534','anne':'1154354344'}
les operations sur les dictionnaire sont les suivantes 
'Jean' in dict = True
>>>dict.keys()
['Jean','Remy','anne']
>>>dict.values()
['050512112','02245124534','1154354344]
>>>dict['Jean']
'050512112'
Enfin pour obtenir les paire l'on a 
dict.items()
[('Jean', '050512112'), ('Remy', '02245124534'), ('anne', '1154354344')]
la methode dict.get(keys)
Pour modifier une valeur l'on fait , supposons que Jean a change de numero 
dict['Jean']='54545'
Pour ajouter une valeur c pareil 
dict['Ylan']='45445154'
Pour supprimer une valeur l'on fait , supposons ici que l'on n'ai plus besoin du numero d'anne 
del dict['anne']
Semaine 2 Recursivit√© :
Un algorithme recursif est un type d'algorithme particulier 
En effet il s'agit d'une fonction qui s'appele elle meme 
Un alogrithme recursif a en general la forme qui suis 
Def fonction_recursive(argument):
  if qqchose: # ici c'est le cas de base
    return 
  else: # 
  return fonction_recursive(argument_modifier) # est la l'appel recursif
Pour faire simple le cas de base est le moment ou l'on connait la valeur pour un calcul notamment ou le moment ou l'on arrete les calcul 
Ex
def factorial(a):
  if a==0:
    return 1
  else:
    return a*factorial(a-1)
Ex 
def car_in_chaine(car,chaine):
  if car==chaine[0]
    return True
  elif len(chaine)==1:
    return False
  else:
    return car_in_chaine(car,chaine[1:])
Ici le cas de base est le moment ou l'on a trouve l'element 
Une fonction recursive possede un graphe d'appel recursif 
Pour faire simple tant que l'on atteint pas le cas de base les appel reste en attente 
ex fac(3)

fac(3) = 2*3
 |  | 2
fact(2) 1*2=2
 |  | 1
fact(1) = 1*1
 |  | 1
fact(0) =0
Cela represente approximativement le graffe de l'appel recursif de fac(3) qui reprensete factorielle 
https://qkzk.xyz/docs/nsi/cours_terminale/prog/recursivite/cours/#ordre-des-appels-r%c3%a9cursifs 
Vous trouver un graphe plus explicite ici 
Il existe 2 type de recursivite :
simple ou lineaire c'est quand la fonction effectue un seul appel (ex factorial)
Et les algo terminaux 
Il est dit terminal si la valeur renvoye et celle de l'appel 
Ma version de factorielle n'est pas terminal puisqu'on multiplie la valeur de l'appel par a
